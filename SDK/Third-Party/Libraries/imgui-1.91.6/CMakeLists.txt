CMAKE_MINIMUM_REQUIRED(VERSION 3.25.0...3.31.2)
# Copyright Â© from 2022 to present, UNKNOWN STRYKER. All Rights Reserved.
PROJECT(ImGUI-1.91.6
        VERSION 0.0
        DESCRIPTION "Dear ImGUI 1.91.6"
        LANGUAGES CXX)

GET_FILENAME_COMPONENT(IMGUI_CMAKE_CURRENT_LIST_DIR ${CMAKE_CURRENT_LIST_DIR} ABSOLUTE)
INCLUDE("${IMGUI_CMAKE_CURRENT_LIST_DIR}/../../../CMake/predefined-settings.cmake")
INCLUDE("${IMGUI_CMAKE_CURRENT_LIST_DIR}/../../../CMake/frogman-engine.cmake")	  

INCLUDE_DIRECTORIES(${IMGUI_CMAKE_CURRENT_LIST_DIR})
FILE(GLOB DEAR_IMGUI_1_91_6 "${IMGUI_CMAKE_CURRENT_LIST_DIR}/*.h" "${IMGUI_CMAKE_CURRENT_LIST_DIR}/*.cpp")




IF(CMAKE_SYSTEM_NAME STREQUAL "Windows")

SET(IMGUI_BACKEND
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_dx11.h
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_dx11.cpp
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_glfw.h
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_glfw.cpp
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_win32.h
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_win32.cpp
)

ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux")

SET(IMGUI_BACKEND
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_vulkan.h
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_vulkan.cpp
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_glfw.h
${IMGUI_CMAKE_CURRENT_LIST_DIR}/backends/imgui_impl_glfw.cpp
)

ENDIF()


ADD_LIBRARY(${CMAKE_PROJECT_NAME} STATIC ${DEAR_IMGUI_1_91_6} ${IMGUI_BACKEND})


IF(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND TARGET_CPU_ARCHITECTURE STREQUAL "x86-64")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES
ARCHIVE_OUTPUT_DIRECTORY_DEBUG          ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/X86-64/Windows/Debug
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/X86-64/Windows/RelWithDebInfo
ARCHIVE_OUTPUT_DIRECTORY_RELEASE        ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/X86-64/Windows/Release
ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/X86-64/Windows/MinSizeRel
)

ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND TARGET_CPU_ARCHITECTURE STREQUAL "arm64")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES
ARCHIVE_OUTPUT_DIRECTORY_DEBUG          ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/ARM64/Windows/Debug
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/ARM64/Windows/RelWithDebInfo
ARCHIVE_OUTPUT_DIRECTORY_RELEASE        ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/ARM64/Windows/Release
ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/ARM64/Windows/MinSizeRel
)


ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND TARGET_CPU_ARCHITECTURE STREQUAL "x86-64")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES
ARCHIVE_OUTPUT_DIRECTORY_DEBUG          ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/X86-64/Linux/Debug
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/X86-64/Linux/RelWithDebInfo
ARCHIVE_OUTPUT_DIRECTORY_RELEASE        ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/X86-64/Linux/Release
ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/X86-64/Linux/MinSizeRel
)

ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND TARGET_CPU_ARCHITECTURE STREQUAL "arm64")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES
ARCHIVE_OUTPUT_DIRECTORY_DEBUG          ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/ARM64/Linux/Debug
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/ARM64/Linux/RelWithDebInfo
ARCHIVE_OUTPUT_DIRECTORY_RELEASE        ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/ARM64/Linux/Release
ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     ${IMGUI_CMAKE_CURRENT_LIST_DIR}/Binaries/ARM64/Linux/MinSizeRel
)


ELSE()
    MESSAGE(FATAL_ERROR "System not selected.")

ENDIF()

