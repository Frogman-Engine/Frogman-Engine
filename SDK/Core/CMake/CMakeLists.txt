CMAKE_MINIMUM_REQUIRED(VERSION 3.25.0...3.31.5)
# Copyright Â© from 2022 to present, UNKNOWN STRYKER. All Rights Reserved.
PROJECT(FE.Core
        VERSION 0.0
        DESCRIPTION "Frogman Engine Core library"
        LANGUAGES CXX)
GET_FILENAME_COMPONENT(FE_CORE_CMAKE_CURRENT_LIST_DIR ${CMAKE_CURRENT_LIST_DIR} ABSOLUTE)

INCLUDE("${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../../CMake/predefined-settings.cmake")	   
INCLUDE("${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../../CMake/frogman-engine.cmake")


#RUN_FROGMAN_HEADER_TOOL("${FE_LOG_HEADERS};${FE_POOL_HEADERS};${FE_CORE_HEADERS};${FE_MISC_HEADERS}" -fno-reflection-helper -max-concurrency=8 -path-to-copyright-notice=${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../../LICENSE.txt)


ADD_LIBRARY(${CMAKE_PROJECT_NAME} STATIC ${FE_ALGORITHM_HEADERS}
${FE_LOG_HEADERS} ${FE_LOG_SOURCES} 
${FE_POOL_HEADERS} 
${FE_CORE_HEADERS} ${FE_CORE_SOURCES}
${FE_MISC_HEADERS}
${THIRD_PARTY_CITY_HASH}
)

IF(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND TARGET_CPU_ARCHITECTURE STREQUAL "x86-64")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES
ARCHIVE_OUTPUT_DIRECTORY_DEBUG          ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/X86-64/Windows/Debug
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/X86-64/Windows/RelWithDebInfo
ARCHIVE_OUTPUT_DIRECTORY_RELEASE        ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/X86-64/Windows/Release
ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/X86-64/Windows/MinSizeRel
)

ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Windows" AND TARGET_CPU_ARCHITECTURE STREQUAL "arm64")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES
ARCHIVE_OUTPUT_DIRECTORY_DEBUG          ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/ARM64/Windows/Debug
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/ARM64/Windows/RelWithDebInfo
ARCHIVE_OUTPUT_DIRECTORY_RELEASE        ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/ARM64/Windows/Release
ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/ARM64/Windows/MinSizeRel
)

ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND TARGET_CPU_ARCHITECTURE STREQUAL "x86-64")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES
ARCHIVE_OUTPUT_DIRECTORY_DEBUG          ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/X86-64/Linux/Debug
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/X86-64/Linux/RelWithDebInfo
ARCHIVE_OUTPUT_DIRECTORY_RELEASE        ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/X86-64/Linux/Release
ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/X86-64/Linux/MinSizeRel
)

ELSEIF(CMAKE_SYSTEM_NAME STREQUAL "Linux" AND TARGET_CPU_ARCHITECTURE STREQUAL "arm64")
SET_TARGET_PROPERTIES(${CMAKE_PROJECT_NAME} PROPERTIES
ARCHIVE_OUTPUT_DIRECTORY_DEBUG          ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/ARM64/Linux/Debug
ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/ARM64/Linux/RelWithDebInfo
ARCHIVE_OUTPUT_DIRECTORY_RELEASE        ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/ARM64/Linux/Release
ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL     ${FE_CORE_CMAKE_CURRENT_LIST_DIR}/../Binaries/ARM64/Linux/MinSizeRel
)

ELSE()
    MESSAGE(FATAL_ERROR "System not selected.")

ENDIF()