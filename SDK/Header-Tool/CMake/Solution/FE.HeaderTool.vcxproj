<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="17.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PreferredToolArchitecture>x64</PreferredToolArchitecture>
  </PropertyGroup>
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="RelWithDebInfo|x64">
      <Configuration>RelWithDebInfo</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="MinSizeRel|x64">
      <Configuration>MinSizeRel</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{467D8A60-085E-393F-8218-0BDD13519E3B}</ProjectGuid>
    <Keyword>Win32Proj</Keyword>
    <WindowsTargetPlatformVersion>10.0.26100.0</WindowsTargetPlatformVersion>
    <Platform>x64</Platform>
    <ProjectName>FE.HeaderTool</ProjectName>
    <VCProjectUpgraderObjectName>NoUpgrade</VCProjectUpgraderObjectName>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <CharacterSet>MultiByte</CharacterSet>
    <PlatformToolset>v143</PlatformToolset>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>10.0.20506.1</_ProjectFileVersion>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\Binaries\Debug\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">FE.HeaderTool.dir\Debug\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">FE.HeaderTool</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\Binaries\RelWithDebInfo\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">FE.HeaderTool.dir\RelWithDebInfo\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">FE.HeaderTool</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\Binaries\Release\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='Release|x64'">FE.HeaderTool.dir\Release\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='Release|x64'">FE.HeaderTool</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='Release|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='Release|x64'">true</GenerateManifest>
    <OutDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\Binaries\MinSizeRel\</OutDir>
    <IntDir Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">FE.HeaderTool.dir\MinSizeRel\</IntDir>
    <TargetName Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">FE.HeaderTool</TargetName>
    <TargetExt Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">.exe</TargetExt>
    <LinkIncremental Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkIncremental>
    <GenerateManifest Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">true</GenerateManifest>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus /utf-8</AdditionalOptions>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <BasicRuntimeChecks>EnableFastChecks</BasicRuntimeChecks>
      <CallingConvention>FastCall</CallingConvention>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <InlineFunctionExpansion>Disabled</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <LanguageStandard>stdcpp20</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OmitFramePointers>false</OmitFramePointers>
      <Optimization>Disabled</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <StringPooling>true</StringPooling>
      <TreatWarningAsError>true</TreatWarningAsError>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level4</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;_WINDOWS_X86_64_;_ALLOWED_DIRECTORY_LENGTH_=256;_V143_=1;_DEBUG_;_ENABLE_ASSERT_;_ENABLE_NEGATIVE_ASSERT_;_ENABLE_EXIT_;_ENABLE_LOG_;_ENABLE_LOG_IF_;CMAKE_INTDIR="Debug"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <ScanSourceForModuleDependencies>true</ScanSourceForModuleDependencies>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_DEBUG;_WINDOWS;_WINDOWS_X86_64_;_ALLOWED_DIRECTORY_LENGTH_=256;_V143_=1;_DEBUG_;_ENABLE_ASSERT_;_ENABLE_NEGATIVE_ASSERT_;_ENABLE_EXIT_;_ENABLE_LOG_;_ENABLE_LOG_IF_;CMAKE_INTDIR=\"Debug\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\debug\libboost_stacktrace_windbg_cached-vc143-mt-sgd-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\debug\libboost_chrono-vc143-mt-sgd-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\debug\libboost_thread-vc143-mt-sgd-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Core\Binaries\X86-64\Windows\Debug\FE.Core.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Framework\Binaries\X86-64\Windows\Debug\FE.Framework.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64 dbghelp.lib</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution/Debug/FE.HeaderTool.lib</ImportLibrary>
      <ProgramDataBaseFile>C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/Binaries/Debug/FE.HeaderTool.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <TargetMachine>MachineX64</TargetMachine>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus /utf-8</AdditionalOptions>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <CallingConvention>FastCall</CallingConvention>
      <DebugInformationFormat>ProgramDatabase</DebugInformationFormat>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <LanguageStandard>stdcpp20</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OmitFramePointers>false</OmitFramePointers>
      <Optimization>MaxSpeed</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <StringPooling>true</StringPooling>
      <TreatWarningAsError>true</TreatWarningAsError>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level4</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_WINDOWS_X86_64_;_ALLOWED_DIRECTORY_LENGTH_=256;_V143_=1;_RELWITHDEBINFO_;_DEBUG_;_ENABLE_ASSERT_;_ENABLE_NEGATIVE_ASSERT_;_ENABLE_EXIT_;_ENABLE_LOG_;_ENABLE_LOG_IF_;CMAKE_INTDIR="RelWithDebInfo"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <ScanSourceForModuleDependencies>true</ScanSourceForModuleDependencies>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_WINDOWS_X86_64_;_ALLOWED_DIRECTORY_LENGTH_=256;_V143_=1;_RELWITHDEBINFO_;_DEBUG_;_ENABLE_ASSERT_;_ENABLE_NEGATIVE_ASSERT_;_ENABLE_EXIT_;_ENABLE_LOG_;_ENABLE_LOG_IF_;CMAKE_INTDIR=\"RelWithDebInfo\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_stacktrace_windbg_cached-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_chrono-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_thread-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Core\Binaries\X86-64\Windows\\RelWithDebInfo\FE.Core.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Framework\Binaries\X86-64\Windows\\RelWithDebInfo\FE.Framework.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64 dbghelp.lib</AdditionalOptions>
      <GenerateDebugInformation>true</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution/RelWithDebInfo/FE.HeaderTool.lib</ImportLibrary>
      <ProgramDataBaseFile>C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/Binaries/RelWithDebInfo/FE.HeaderTool.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <TargetMachine>MachineX64</TargetMachine>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus /utf-8</AdditionalOptions>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <CallingConvention>FastCall</CallingConvention>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FavorSizeOrSpeed>Speed</FavorSizeOrSpeed>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <LanguageStandard>stdcpp20</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OmitFramePointers>true</OmitFramePointers>
      <Optimization>Full</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <StringPooling>true</StringPooling>
      <TreatWarningAsError>true</TreatWarningAsError>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level4</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_WINDOWS_X86_64_;_ALLOWED_DIRECTORY_LENGTH_=256;_V143_=1;_RELEASE_;_ENABLE_EXIT_;CMAKE_INTDIR="Release"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
      <ScanSourceForModuleDependencies>true</ScanSourceForModuleDependencies>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_WINDOWS_X86_64_;_ALLOWED_DIRECTORY_LENGTH_=256;_V143_=1;_RELEASE_;_ENABLE_EXIT_;CMAKE_INTDIR=\"Release\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_stacktrace_noop-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_chrono-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_thread-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Core\Binaries\X86-64\Windows\Release\FE.Core.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Framework\Binaries\X86-64\Windows\Release\FE.Framework.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64 dbghelp.lib</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution/Release/FE.HeaderTool.lib</ImportLibrary>
      <ProgramDataBaseFile>C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/Binaries/Release/FE.HeaderTool.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <TargetMachine>MachineX64</TargetMachine>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <AdditionalOptions>%(AdditionalOptions) /Zc:__cplusplus /utf-8</AdditionalOptions>
      <AssemblerListingLocation>$(IntDir)</AssemblerListingLocation>
      <CallingConvention>FastCall</CallingConvention>
      <EnableEnhancedInstructionSet>AdvancedVectorExtensions</EnableEnhancedInstructionSet>
      <ExceptionHandling>Sync</ExceptionHandling>
      <FavorSizeOrSpeed>Size</FavorSizeOrSpeed>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <InlineFunctionExpansion>AnySuitable</InlineFunctionExpansion>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <LanguageStandard>stdcpp20</LanguageStandard>
      <LanguageStandard_C>stdc17</LanguageStandard_C>
      <MultiProcessorCompilation>true</MultiProcessorCompilation>
      <OmitFramePointers>true</OmitFramePointers>
      <Optimization>MinSpace</Optimization>
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>
      <RuntimeTypeInfo>true</RuntimeTypeInfo>
      <StringPooling>true</StringPooling>
      <TreatWarningAsError>true</TreatWarningAsError>
      <UseFullPaths>false</UseFullPaths>
      <WarningLevel>Level4</WarningLevel>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_WINDOWS_X86_64_;_ALLOWED_DIRECTORY_LENGTH_=256;_V143_=1;_RELEASE_;_MINSIZEREL_;_ENABLE_EXIT_;CMAKE_INTDIR="MinSizeRel"</PreprocessorDefinitions>
      <ObjectFileName>$(IntDir)</ObjectFileName>
      <DebugInformationFormat>
      </DebugInformationFormat>
      <ScanSourceForModuleDependencies>true</ScanSourceForModuleDependencies>
    </ClCompile>
    <ResourceCompile>
      <PreprocessorDefinitions>%(PreprocessorDefinitions);WIN32;_WINDOWS;NDEBUG;_WINDOWS_X86_64_;_ALLOWED_DIRECTORY_LENGTH_=256;_V143_=1;_RELEASE_;_MINSIZEREL_;_ENABLE_EXIT_;CMAKE_INTDIR=\"MinSizeRel\"</PreprocessorDefinitions>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
    </ResourceCompile>
    <Midl>
      <AdditionalIncludeDirectories>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\City-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glfw-3.4\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\glm-1.0.1;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\Robin-Hood-Hash;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Core\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Framework\Include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Google-Test\include;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Third-Party\Tools\X86-64\Benchmark\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <OutputDirectory>$(ProjectDir)/$(IntDir)</OutputDirectory>
      <HeaderFileName>%(Filename).h</HeaderFileName>
      <TypeLibraryName>%(Filename).tlb</TypeLibraryName>
      <InterfaceIdentifierFileName>%(Filename)_i.c</InterfaceIdentifierFileName>
      <ProxyFileName>%(Filename)_p.c</ProxyFileName>
    </Midl>
    <Link>
      <AdditionalDependencies>C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_stacktrace_noop-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_chrono-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\..\Third-Party\Libraries\boost-1.86.0\lib\windows\v143\release\libboost_thread-vc143-mt-s-x64-1_86.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Core\Binaries\X86-64\Windows\MinSizeRel\FE.Core.lib;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\..\..\Framework\Binaries\X86-64\Windows\MinSizeRel\FE.Framework.lib;kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib</AdditionalDependencies>
      <AdditionalLibraryDirectories>%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
      <AdditionalOptions>%(AdditionalOptions) /machine:x64 dbghelp.lib</AdditionalOptions>
      <GenerateDebugInformation>false</GenerateDebugInformation>
      <IgnoreSpecificDefaultLibraries>%(IgnoreSpecificDefaultLibraries)</IgnoreSpecificDefaultLibraries>
      <ImportLibrary>C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution/MinSizeRel/FE.HeaderTool.lib</ImportLibrary>
      <ProgramDataBaseFile>C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/Binaries/MinSizeRel/FE.HeaderTool.pdb</ProgramDataBaseFile>
      <SubSystem>Console</SubSystem>
      <TargetMachine>MachineX64</TargetMachine>
    </Link>
    <ProjectReference>
      <LinkLibraryDependencies>false</LinkLibraryDependencies>
    </ProjectReference>
  </ItemDefinitionGroup>
  <ItemGroup>
    <CustomBuild Include="C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\CMakeLists.txt">
      <UseUtf8Encoding>Always</UseUtf8Encoding>
      <Message Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Building Custom Rule C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake -BC:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution --check-stamp-file C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\MSVC.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-Initialize.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\WindowsPaths.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\frogman-engine.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\predefined-settings.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeCXXCompiler.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeRCCompiler.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">Building Custom Rule C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake -BC:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution --check-stamp-file C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\MSVC.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-Initialize.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\WindowsPaths.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\frogman-engine.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\predefined-settings.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeCXXCompiler.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeRCCompiler.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='RelWithDebInfo|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Building Custom Rule C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='Release|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake -BC:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution --check-stamp-file C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\MSVC.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-Initialize.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\WindowsPaths.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\frogman-engine.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\predefined-settings.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeCXXCompiler.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeRCCompiler.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='Release|x64'">C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='Release|x64'">false</LinkObjects>
      <Message Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">Building Custom Rule C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/CMakeLists.txt</Message>
      <Command Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">setlocal
"C:\Program Files\CMake\bin\cmake.exe" -SC:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake -BC:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution --check-stamp-file C:/Users/leeho/OneDrive/문서/GitHub/Frogman-Engine/SDK/Header-Tool/CMake/Solution/CMakeFiles/generate.stamp
if %errorlevel% neq 0 goto :cmEnd
:cmEnd
endlocal &amp; call :cmErrorLevel %errorlevel% &amp; goto :cmDone
:cmErrorLevel
exit /b %1
:cmDone
if %errorlevel% neq 0 goto :VCEnd</Command>
      <AdditionalInputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeCXXInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeCommonLanguageInclude.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeGenericSystem.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeInitializeConfigs.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeLanguageInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeRCInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeSystemSpecificInformation.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\CMakeSystemSpecificInitialize.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\CMakeCommonCompilerMacros.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Compiler\MSVC.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-Initialize.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-MSVC-CXX.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows-MSVC.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\Windows.cmake;C:\Program Files\CMake\share\cmake-3.29\Modules\Platform\WindowsPaths.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\frogman-engine.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\CMake\predefined-settings.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeCXXCompiler.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeRCCompiler.cmake;C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\3.29.6\CMakeSystem.cmake;%(AdditionalInputs)</AdditionalInputs>
      <Outputs Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\CMakeFiles\generate.stamp</Outputs>
      <LinkObjects Condition="'$(Configuration)|$(Platform)'=='MinSizeRel|x64'">false</LinkObjects>
    </CustomBuild>
  </ItemGroup>
  <ItemGroup>
    <ClCompile Include="C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\Source\main.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="C:\Users\leeho\OneDrive\문서\GitHub\Frogman-Engine\SDK\Header-Tool\CMake\Solution\ZERO_CHECK.vcxproj">
      <Project>{13897F00-4476-321E-99FD-2193E57CC811}</Project>
      <Name>ZERO_CHECK</Name>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </ProjectReference>
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>